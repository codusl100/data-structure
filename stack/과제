import java.util.Scanner;
import java.util.EmptyStackException;
class Stack<E>{
	private E s[]; // 스택을 위한 배열
	int top; // 스택의 top 항목의 배열 원소 인덱스
	private int size; // 스택의 사이즈
	public Stack() { // 스택 생성자
		s = (E[]) new Object[1]; //초기에 크기가 1인 배열 생성
		top = -1;
		size = 0;
	}
	public int size() {return top+1;} //스택에 있는 항목의 수를 리턴
	public boolean isEmpty() {return (top == -1);}	//스택이 empty이면 true 리턴
	//peak(), push(), pop(), resize() 메소드 선언


public E peek() { //스택 top 항목만의 내용만을 리턴
	if (isEmpty()) throw new EmptyStackException(); //underflow시 프로그램 정지
	return s[top];
}	

public void push(E newItem) { // push 연산
	if(size() == s.length)
		resize(2*s.length); //스택을 2배의 크기로 확장
	s[++top] = newItem; //새 항목을 push
}

public E pop() { // pop 연산
	if(isEmpty()) throw new EmptyStackException(); //underflow시 프로그램 정지
	E item = s[top];
	s[top--] = null; //null로 초기화
	if(size()>0 && size()==s.length/4)
		resize(s.length/2); //스택을 1/2 크기로 축소
	return item;
}

public void resize(int length) { //다시
	  E b[] = (E[]) new Object[length];
      for(int i=0; i<top+1; i++) 
    	  {b[i] = s[i];
    	  s = b;}
}


}

public class main {
	public static int order(char c) {//연산자 우선 순위 비교
		switch(c) {
			case '(':
			case '{':
				return 0;
			case '+':
			case '-':
				return 1;
			case '*':
			case '/':
				return 2;
			default:
				return -1;
		}
	}

	public static int compare(char c, char c2) {
		int num1 = order(c); // 현재 stack top
		int num2 = order(c2); // 입력받은 값
		
		// 현재 우선순위가 더 높은 경우
	    if (num1 > num2){
	        return 1;
	    }
	    // 우선순위가 같은 경우
	    else if (num1 == num2){
	        return 0;
	    }
	    // 스택의 우선순위가 더 높은 경우
	    else {
	        return -1;
	    }
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		Stack<Character> stack = new Stack<Character>();
		System.out.print("문자열을 입력하시오: ");
		String str = sc.next();
		String ans = ""; //최종 후위표기법 문자열
		
		//1.중위표기법 -> 후위표기법 표기
		for(int i=0;i<str.length();i++) {
			char c = str.charAt(i); //c는 str문자열의 한 문자
			if(Character.isAlphabetic(c)) //c가 영문자라면
				{ans += c;} //ans에 바로 c push
			
			else if(c=='+'||c=='-'||c=='*'||c=='/') { //입력받은 값이 연산자라면
				if(stack.isEmpty())
					stack.push(c);
				else if(!stack.isEmpty() && (compare(stack.peek(),c)>0)) {
				//stack이 비지 않고, stack의 상위 값이 우선순위 연산자라면
					while(true) {
						if((compare((char)stack.top,c)<=0)) {
							stack.push(c);
							break;
						}
						ans+=stack.pop();
					}
					
				}
				else if(!stack.isEmpty()&& (compare(stack.peek(),c))<=0) {
					stack.push(c);
						}
			
			else if(c=='('||c=='{') { //입력받은 값이 열린 괄호라면
				stack.push(c);
			}
			else if(c==')'||c=='}') { //입력받은 값이 닫힌 괄호라면
				while(stack.top!='('||stack.top!='{') { //열린 괄호가 안나올때까지
					ans+=stack.pop();
				}
				 stack.pop();
			}
			
			System.out.println(ans);
		System.out.println(stack.top);
			}
		}
		//남은 연산자 출력
		while(!stack.isEmpty()) {
			ans+=stack.pop();
		}
		
		System.out.println(ans);
		//2.중위표기법 -> 후위표기법 계산
		Stack<Double> cal = new Stack<Double>();
		System.out.print("계산식을 입력하시오: ");
		String newstr = sc.next();
		char sum = ' ';
		double num1 = 0;
		double num2 = 0;
		
		/*for(int i=0;i<newstr.length();i++) {
			char k = newstr.charAt(i);
			
			if(Character.isDigit(k)) {
				cal.push((double)k); //수라면 스택 cal에 더해준다
			}
			else { //연산자라면
				num1 = Double.valueOf(stack.pop());
				num2 = Double.valueOf(stack.pop());
				
				switch(k) {
				case '+':
					cal.push(num1+num2);
					break;
				case '-':
					cal.push(num1-num2);
					break;
				case '*':
					cal.push(num1*num2);
					break;
				case '/':
					cal.push(num1/num2);
					break;
				}
			}
		}
		System.out.println(sum);*/
}
}
